import tkinter as tk
import matplotlib.pyplot as plt
import numpy as np
from math import sin, cos, tan, log, sqrt

class Calculator:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Scientific Calculator")

        self.entry = tk.Entry(self.root, width=40, borderwidth=5)
        self.entry.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

        self.create_buttons()

    def create_buttons(self):
        button_list = [
            "1", "2", "3", "+",
            "4", "5", "6", "-",
            "7", "8", "9", "*",
            "0", ".", "=", "/",
            "sin", "cos", "tan", "log",
            "sqrt", "Clear", "Graph"
        ]

        row_count = 1
        col_count = 0

        for button in button_list:
            if button == "=":
                btn = tk.Button(self.root, text=button, padx=20, pady=10, command=self.evaluate)
                btn.grid(row=row_count, column=col_count, padx=5, pady=5)
            elif button == "Clear":
                btn = tk.Button(self.root, text=button, padx=15, pady=10, command=self.clear)
                btn.grid(row=row_count, column=col_count, padx=5, pady=5)
            elif button == "Graph":
                btn = tk.Button(self.root, text=button, padx=10, pady=10, command=self.graph)
                btn.grid(row=row_count, column=col_count, padx=5, pady=5)
            else:
                btn = tk.Button(self.root, text=button, padx=20, pady=10, command=lambda x=button: self.entry.insert(tk.END, x))
                btn.grid(row=row_count, column=col_count, padx=5, pady=5)

            col_count += 1
            if col_count > 3:
                row_count += 1
                col_count = 0

    def evaluate(self):
        try:
            result = eval(self.entry.get())
            self.clear()
            self.entry.insert(tk.END, str(result))
        except Exception:
            self.clear()
            self.entry.insert(tk.END, "Error")

    def clear(self):
        self.entry.delete(0, tk.END)

    def graph(self):
        try:
            math_expr = self.entry.get()
            x = np.linspace(-10, 10, 400)
            y = eval(math_expr)

            plt.plot(x, y)
            plt.xlabel('x')
            plt.ylabel('y')
            plt.title('Graph of {}'.format(math_expr))
            plt.grid(True)
            plt.show()
        except Exception as e:
            self.clear()
            self.entry.insert(tk.END, "Error: Could not graph expression")

    def run(self):
        self.root.mainloop()

calculator = Calculator()
calculator.run()
